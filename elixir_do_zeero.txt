defmodule Contador do
	1- def contar([]), do: 0
	2- def contar([head | tail]), do: 1 + conta(tail)
end

Contador.contar [1, 2, 3, 4, 5, 6]

1 - lista vzia = false
2 - def contar([1 | [2, 3, 4, 5, 6]), do: 1 + conta([2, 3, 4, 5, 6])

dentro da clausula 2 -
[1 | [2, 3, 4, 5, 6], 1 + conta([2, 3, 4, 5, 6])	.1 interação
[2 | [3, 4, 5, 6], 1 + conta([3, 4, 5, 6])		.2
[3 | [4, 5, 6], 1 + conta([4, 5, 6])			.3
[4 | [5, 6], 1 + conta([5, 6])				.4
[5 | [6], 1 + conta([6])				.5
[6 | [], 1 + conta([])					.6
1 - lista vzia = true

dentro retorno
1 + [2, 3, 4, 5, 6]		1. interação
1 + 1 + [3, 4, 5, 6]		2. 
1 + 1 + 1 + [4, 5, 6]		3.
1 + 1 + 1 + 1 + [5, 6]		4.
1 + 1 + 1 + 1 + 1 + [6]		5.
1 + 1 + 1 + 1 + 1 + 1 + []	6.
1   2   3   4   5   6  []
retorn = 6

Elixir concorrência = pág 55 ou 69

Stream.map(1 .. 20_000_000, &(&1)) |> Enum.take(10)
Enum.map(1 .. 20_000_000, &(&1)) |> Enum.take(10)

Stream é bem mais rápido com números, grandes, porém não tem uma eficacia boa com números pequenos, ou dados.















































