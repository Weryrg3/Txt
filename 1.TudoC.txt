
##########################################################

defmodule Greeter do
  def for(name, greeting) do
    fn
      (^name) -> "#{greeting} #{name}"
      (_)     -> "I don't know you"
    end
  end
end

##########################################################

defmodule Times do	#Função tamanho(linhas) grande
  def double(n) do
    n * 2
  end
end

defmodule Times do	#Função tamanho(linhas) médio
  def double(n), do: n * 2
end

defmodule Times, do: (def double(n), do: n * 2)		#Função pequena, não aconselhavel

##########################################################
#default_params.exs

defmodule Example do
	def func(p1, p2 \\ 2, p3 \\ 3, p4) do
		IO.inspect [p1, p2, p3, p4]
	end
end

#Example.func(4, 5, 6, 7)


##########################################################
#default_params2.exs

defmodule Params do
	def func(p1, p2 \\ 123)
	def func(p1, p2) when is_list(p1) do
		"You said #{p2} with a list"
	end
	def func(p1, p2) do
		"You passed in #{p1} and #{p2}"
	end
end

##########################################################
#fatorial1.exs

defmodule Factorial do
	def of(0), do: 1
	def of(n), do: n * of(n-1)
end

##########################################################
#guard.exs - Editado = (guardEd.ex)

defmodule Guard do
	def what_is(x) when is_number(x) do
		IO.puts "#{x} is a number"
	end
	def what_is(x) when is_list(x) do
		IO.puts "#{inspect(x)} is a list"
		#IO.puts "#{x} is a list" #^A^B^C
	end
	def what_is(x) when is_atom(x) do
		IO.puts "#{x} is an atom"
	end
end

##########################################################
#ModuloExe.exs

defmodule Mod do
	def func1 do
		IO.puts "in func1"
	end
	def func2 do
		func1
		IO.puts "in func2"
	end
end

#simplificando 

defmodule Outer do
	defmodule Inner do
		def inner_func do
		end
	end
	def outer_func do
		Inner.inner_func
	end
end

##########################################################
#mylist.exs

defmodule MyList do
  def len([]), do: 0
  def len([head | tail]), do: 1 + len(tail)
end

##########################################################
#attributes.exs - Editado = (attributesEd.ex)

defmodule Example1 do
	@author "Wesley Rodrigues"
	def get_author do
		@author
	end	
end
IO.puts "Example was written by #{Example1.get_author}"

defmodule Example2 do
	@attr "one"
	def first, do: @attr
	@attr "two"
	def second, do: @attr
end
IO.puts "#{Example2.second} #{Example2.first}"

##########################################################
#mylist1.exs

defmodule MyList do
  def len([]), do: 0
  def len([_head | tail]), do: 1 + len(tail)
end

##########################################################
#mylist2.exs

defmodule MyList do
	def square([]), do: []
	def square([ head | tail]), do: [head * head | square(tail)]
end

##########################################################
#mylist3.exs

defmodule MyList do
	def add_1([]), do: []
	def add_1([ head | tail ]), do: [head+1 | add_1(tail)]
end

##########################################################
#mylist4.exs

defmodule MyList do
  def map([], _func), do: []
  def map([ head | tail ], func), do: [ func.(head) | map(tail, func)]
  #Recebe valores e uma função
end

#MyList.map [1, 2, 3, 4], fn (n) -> n/2 end

##########################################################
#mylist_sum.exs

defmodule MyList do
  def sum([], total), do: total
  def sum([ head | tail], total), do: sum(tail, head+total)
end

#MyList.sum([1, 2, 3, 4], 0)

##########################################################
#mylist_sum1.exs

defmodule MyList do
  def sum(list), do: _sum(list, 0)

  defp _sum([], total), do: total # função privada
  defp _sum([ head | tail ], total), do: _sum(tail, head+total)
end

#MyList.sum([1, 2, 3, 4])

##########################################################
#times.exs

defmodule Times do
  def double(n) do
    n * 2
  end
end

##########################################################
#times2.exs

defmodule Times do
  def double1(n), do: n * 2
  def triple1(n), do: n * 3
  def quadru1(n), do: 2 * double1(n)
end

##########################################################
# weather.exs

defmodule WeatherHistory do
  def for_location_27([]), do: []
  def for_location_27([ [time, 27, temp, rain ] | tail]) do
    [ [time, 27, temp, rain] | for_location_27(tail) ]
  end
  def for_location_27([ _ | tail]), do: for_location_27(tail)

def test_data do
  [
   [1366225622, 26, 15, 0.125],
   [1366225622, 27, 15, 0.45],
   [1366225622, 28, 21, 0.25],
   [1366229222, 26, 19, 0.081],
   [1366229222, 27, 17, 0.468],
   [1366229222, 28, 15, 0.60],
   [1366232822, 26, 22, 0.095],
   [1366232822, 27, 21, 0.05],
   [1366232822, 28, 24, 0.03],
   [1366236422, 26, 17, 0.025]
  ]
end
end

#for_location_27(WeatherHistory.test_data)   

##########################################################
#weather2.exs
##########################################################
#weather3.exs
##########################################################
#reduce.exs
##########################################################
swap.exs
##########################################################
